<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
		JavaScript / ES2015 / JSX Grammar
		---------------------------------
	
		Based on https://github.com/gandm/language-babel, but with
		many changes:
	
		* Scope names were cleaned up and now conform much more to 
			TextMate conventions.
		* A number of instances were fixed where _two_ space-separated 
			scope names were used as a scope value, which screws up a _lot_
			of stuff.
		* Removed all the Facebook Flow stuff.
		* Added all of the defined DOM APIs that are part of the
			official JS bundle.
		* Leading space before a single-line comment (double-slash) is now
			part of the comment’s scope, which makes life easier for commands
			and snippets that act on comments.
	
		Yet to be done:
	
		* JSX really ought to go in a separate grammar that then includes
			this one, but that’d be tricky, and would likely have to pluck
			lots of individual repo items out of this grammar instead of
			just including it whole, so I’m not looking forward to it.
	</string>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>_js</string>
		<string>es</string>
		<string>es6</string>
		<string>gs</string>
		<string>htc</string>
		<string>pac</string>
		<string>jsm</string>
		<string>jslib</string>
		<string>jspre</string>
		<string>xsjs</string>
		<string>xsjslib</string>
		<string>jscad</string>
		<string>json5</string>
		<string>jsx</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!.*\b(node|iojs|JavaScript)</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>JavaScript</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.js</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Allows the special return snippet to fire.</string>
			<key>match</key>
			<string>(\{)(\})</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.begin.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.end.js</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Allows special actions when the cursor is between two parentheses.</string>
			<key>match</key>
			<string>(\()(\))</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#round-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#square-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-brackets</string>
				</dict>
			</array>
		</dict>
		<key>class-method-definition</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(@@[_$a-zA-Z][$\w]*|static|return)(?=\s*[&lt;(])|(?=\s*&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*[;{])</string>
					<key>name</key>
					<string>meta.short-method.flowtype.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#curly-brackets</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=[]"'])\s*(?=[&lt;(])</string>
					<key>end</key>
					<string>(?=\s*[;{])</string>
					<key>name</key>
					<string>meta.class-method.computed.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#curly-brackets</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  ((?&gt;get|set)\s+)
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    ([_$a-zA-Z][$\w]*|\d+)
  )(?=\s*[&lt;(])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*[;{])</string>
					<key>name</key>
					<string>meta.class-accessor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#curly-brackets</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    ([_$a-zA-Z][$\w]*|\d+)
  )(?=\s*[&lt;(])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*[;{])</string>
					<key>name</key>
					<string>meta.class-method.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#curly-brackets</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>class-method-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;static|declare)\b</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(async)\b</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(get|set)\b(?!\s*\()</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>storage.modifier.generator.js</string>
				</dict>
			</array>
		</dict>
		<key>class-properties</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([_$a-zA-Z][$\w]*)(?=\s*[:=])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*[;}])</string>
					<key>name</key>
					<string>meta.class.property.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.js</string>
					<!-- tokens within a comment block -->
					<key>patterns</key>
					<array>
						<dict>
							<!--
								jsdoc keywords/tags in alphabetical order
							-->
							<key>match</key>
							<string>(?&lt;!\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|default[vV]alue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extension[fF]or|external|field|file|file[oO]verview|final|fires|for|function|global|host|ignore|implements|inherit[dD]oc|inner|instance|interface|kind|lends|license|link|listens|main|member|member[oO]f|method|mixex|mixins?|module|name|namespace|no[cC]ollapse|no[sS]ide[eE]ffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|TODO|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|write[oO]nce)\b</string>
							<key>name</key>
							<string>keyword.other.documentation.js.jsdoc</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&gt;&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\s*)(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.shebang.js</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>curly-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.curly.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>es7-decorators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (@)([_$a-zA-Z][$\w]*)\b</string>
					<key>name</key>
					<string>meta.tag.decorator.js</string>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#merge-conflits</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es7-decorators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-dom</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-other</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-prototype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-template-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;!\.)\.\.\.</string>
							<key>name</key>
							<string>keyword.operator.spread.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$a-zA-Z][$\w]*)</string>
							<key>name</key>
							<string>variable.parameter.function.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameter.function.js</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>=</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[,)])</string>
							<key>name</key>
							<string>meta.parameter.optional.js</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-attribute-assignment</key>
		<dict>
			<key>match</key>
			<string>=</string>
			<key>name</key>
			<string>keyword.operator.assignment.jsx</string>
		</dict>
		<key>jsx-attribute-name</key>
		<dict>
			<key>match</key>
			<string>[_$a-zA-Z][-$\w]*</string>
			<key>name</key>
			<string>entity.other.attribute-name.jsx</string>
		</dict>
		<key>jsx-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>jsx-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>&amp;(?:[a-zA-Z0-9]+|#\d+|#x\h+);</string>
					<key>name</key>
					<string>constant.character.entity.jsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;\S*;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.jsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-evaluated-code</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.begin.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.end.jsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.embedded.expression.jsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-quoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.jsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!\\)'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.jsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.jsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-entities</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.jsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!\\)"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.jsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.jsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-entities</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-end</key>
		<dict>
			<key>begin</key>
			<string>&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=&lt;/)</string>
			<key>name</key>
			<string>meta.tag.jsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-start</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-start</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(&lt;)([_$a-zA-Z][-$:.\w]*[$\w]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.jsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(&lt;/)(\2)(&gt;)|(/&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.jsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.jsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.jsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.tag.jsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-tag-end</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-attributes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;</string>
					<key>name</key>
					<string>invalid.illegal.tag.incomplete.jsx</string>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)? # optional variable assignment
  (?:\b(async)\s+)?								 # optional async
  (?=															 # followed by...
		(\(														 # literal open-paren
			(?&gt;
				(?&gt;[^()]+)|								 # parameters
					\g&lt;-1&gt;									 # or repeat this capture group (paren-balancing)
			)*													 # (0 or more of)
		\))\s*(=&gt;)										 # close paren, arrow
	)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>arrow function with one parameter (doesn’t need parens)</string>
					<key>match</key>
					<string>(?x)
  (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)?	# optional variable assignment
  (?:(async)\s+)?										# optional async
  \b([_$a-zA-Z][$\w]*)\s*(=&gt;)				# param name, arrow
	</string>
					<key>name</key>
					<string>meta.function.arrow.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?				# object
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)		# identifier
  \s*(=)
  \s*(async)?								# optional async
  \s*
	(?=												# followed by
		(\(											# open paren
			(?&gt;
				(?&gt;[^()]+)|\g&lt;-1&gt; 	# params OR repeat this capture group (paren-balancing)
			)*
		\))\s*(=&gt;))							# close paren, arrow
	</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.prototype.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>arrow function with one parameter (doesn’t need parens)</string>
					<key>match</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?				# object
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)		# identifier
  \s*(=)
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;) # param name, arrow
	</string>
					<key>name</key>
					<string>meta.prototype.function.arrow.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*(=)
  \s*(async)?
  \s*(?=(\((?&gt;(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.static.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*(=)
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.static.arrow.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    (([_$a-zA-Z][$\w]*|\d+))
  )
  \s*(:)
  \s*(?:\b(async)\s+)?
  \s*(?=(\((?&gt;(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>meta.string.unquoted.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.js</string>
						</dict>
						<key>14</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>meta.string.unquoted.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    (([_$a-zA-Z][$\w]*|\d+))
  )
  \s*(:)
  \s*(?:\b(async)\s+)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(?:(class)|(interface))\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.interface.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>([_$a-zA-Z][$\w]*)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.class.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?={)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;!\.)\b(extends)\b</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>storage.type.extends.js</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?={)</string>
									<key>name</key>
									<string>meta.class.extends.js</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.scope.begin.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#es7-decorators</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#class-properties</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#class-method-definition</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#class-method-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#brackets</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(new)\s+(?=[_$a-zA-Z][$\w.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?![_$a-zA-Z][$\w.]*)</string>
					<key>name</key>
					<string>meta.instance.constructor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#support-class</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#support-other</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.class.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$a-zA-Z][$\w.]*\.)?([_$a-zA-Z][$\w]*)</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-for</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(for)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.for.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.round.begin.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literal-keyword-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-punctuation</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)? # optional label + assignment
  (?:(async)\s+)?									 # optional "async" annotation
  (function)											
	(?&gt;
		\s*(\*)|											 # generator asterisk OR
		(?=[\s(&lt;])										 # space/paren lookahead
	)
  \s*([_$a-zA-Z][$\w]*)?					 # optional function name
	</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
					(?&lt;=\)) # just past the closing paren
					</string>
					<key>name</key>
					<string>meta.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)
  \s*(=)
  \s*(?:(async)\s+)?
  \s*(function)(?&gt;\s*(\*)|(?=[\s(&lt;]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.prototype.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*(=)
  \s*(?:(async)\s+)?
  \s*(function)(?&gt;\s*(\*)|(?=[\s(&lt;]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.static.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.begin.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.end.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)\s*((\()\s*(\)))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)\s*(?=\()</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)\s*(?=`)</string>
					<key>name</key>
					<string>meta.function-call.tagged-template.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    (([_$a-zA-Z][$\w]*|\d+))
  )
  \s*(:)
  \s*(?:\b(async)\s+)?
  \s*(function)(?&gt;\s*(\*)|(?=[\s(&lt;]))
  \s*([_$a-zA-Z][$\w]*)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>14</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
						<key>15</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>meta.string.unquoted.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.object-literal.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-jsx</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\(|\{|\[|,|&amp;&amp;|\|\||\?|:|=|=&gt;|\Wreturn|^return|\Wdefault|^)(?=\s*&lt;[_$a-zA-Z])</string>
			<key>contentName</key>
			<string>meta.jsx.js</string>
			<key>end</key>
			<string>(?&lt;=/&gt;|&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-start</string>
				</dict>
			</array>
		</dict>
		<key>literal-keyword-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;const|let|var)\b</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-keyword-storage</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b((?&gt;await|yield))\b(?:\s*(\*))?</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(return)\b</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;if|else)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;catch|finally|throw|try)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;break|continue|do|goto|while|case|default)\b</string>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;enum|module|public|package|private|interface|protected)\b</string>
					<key>name</key>
					<string>keyword.other.reserved.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;!\?)(?&lt;!\?\s)(?=(?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
  )\s*:)</string>
					<key>end</key>
					<string>:</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.attribute-name.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)</string>
					<key>name</key>
					<string>meta.object.key.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(true)\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(false)\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(null)\b</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(undefined)\b</string>
					<key>name</key>
					<string>constant.language.undefined.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(NaN)\b</string>
					<key>name</key>
					<string>constant.language.nan.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(arguments)\b</string>
					<key>name</key>
					<string>variable.language.arguments.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(super)\b</string>
					<key>name</key>
					<string>variable.language.super.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(this)\b</string>
					<key>name</key>
					<string>variable.language.this.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(self)\b</string>
					<key>name</key>
					<string>variable.language.self.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(__proto__)\b</string>
					<key>name</key>
					<string>variable.language.proto.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(constructor)\b</string>
					<key>name</key>
					<string>variable.language.constructor.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(prototype)\b</string>
					<key>name</key>
					<string>variable.language.prototype.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-method</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:\b(static)\s+)? # optional "static" keyword
  (?:\b(async)\s+)?  # optional "async" keyword
  (?:(\*)\s*)?       # optional generator symbol
  (?&gt;
    ((')((?&gt;[^'\\]|\\.)*)('))|
    ((")((?&gt;[^"\\]|\\.)*)("))|
    (([_$a-zA-Z][$\w]*|\d+))
  )									 # method name, quoted or unquoted
  (?=								 # followed by
		\s*							 
		(\(
			(?&gt;(?&gt;[^()]+)|\g&lt;-1&gt;)* # parens w/ optional params
		 \))
		 (?&gt;\s|/\*.*\*/)*\{ 			# and an opening brace
	)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>meta.string.unquoted.js</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.generator.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>
					New object literal/class notation:
					
					class X {
						render (foo, bar) {
							//...
						}
					}
					
					</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.method.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b(?:(static)\s+)?
  (get|set)\s+
  ([_$a-zA-Z][$\w]*|\d+)\s*
  (?=(\((?&gt;(?&gt;[^()]+)|\g&lt;-1&gt;)*\))(?&gt;\s|/\*.*\*/)*\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.accessor.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>set foo (value) {</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.accessor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-method-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.begin.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.end.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  ((\()\s*(\)))</string>
					<key>name</key>
					<string>meta.function-call.static.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.begin.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.end.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  ((\()\s*(\)))</string>
					<key>name</key>
					<string>meta.function-call.method.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.method.with-arguments.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-module</key>
		<dict>
			<key>comment</key>
			<string>TODO: revisit</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;import|export|default|from|as)\b</string>
					<key>name</key>
					<string>keyword.operator.module.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?xi)
  (?:\B[-+])?
  (?:
    \b0b[0-1]*|                 # binary
    \b0o[0-7]*|                 # octal
    \b0x[0-9a-f]*|              # hex
    (
      \B\.[0-9]+|               # e.g. .999
      \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
    )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
  )</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)(Infinity)\b</string>
					<key>name</key>
					<string>constant.language.infinity.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;delete|instanceof|in|new|of|typeof|void|with)\b</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  !(?!=)| # logical-not     right-to-left   right
  &amp;&amp;    | # logical-and     left-to-right   both
  \|\|    # logical-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.logical.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  %=   | # assignment      right-to-left   both
  &amp;=   | # assignment      right-to-left   both
  \*=  | # assignment      right-to-left   both
  \+=  | # assignment      right-to-left   both
  -=   | # assignment      right-to-left   both
  /=   | # assignment      right-to-left   both
  \^=  | # assignment      right-to-left   both
  \|=  | # assignment      right-to-left   both
  &lt;&lt;=  | # assignment      right-to-left   both
  &gt;&gt;=  | # assignment      right-to-left   both
  &gt;&gt;&gt;=   # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ~    | # bitwise-not     right-to-left   right
  &lt;&lt;   | # bitwise-shift   left-to-right   both
  &gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
  &gt;&gt;   | # bitwise-shift   left-to-right   both
  &amp;    | # bitwise-and     left-to-right   both
  \^   | # bitwise-xor     left-to-right   both
  \|     # bitwise-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  &lt;=   | # relational      left-to-right   both
  &gt;=   | # relational      left-to-right   both
  &lt;    | # relational      left-to-right   both
  &gt;      # relational      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.relational.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ===  | # equality        left-to-right   both
  !==  | # equality        left-to-right   both
  ==   | # equality        left-to-right   both
  !=     # equality        left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.comparison.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  --   | # decrement       n/a             right-or-left
  \+\+ | # increment       n/a             right-or-left
  /    | # division        left-to-right   both
  %    | # modulus         left-to-right   both
  \*   | # multiplication  left-to-right   both
  \+   | # addition        left-to-right   both
  -      # subtraction     left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?:]</string>
					<key>name</key>
					<string>keyword.operator.ternary.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.operator.accessor.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-prototype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\s*(=)\s*</string>
					<key>name</key>
					<string>meta.prototype.declaration.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\b</string>
					<key>name</key>
					<string>meta.prototype.access.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.comma.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
				  (?&lt;= # preceded by:
				    \.|\(|,|{|}|\[|;|&lt;|&gt;|&lt;=|&gt;=|==|!=|===| # operators
						!==|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||
						\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=
						|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=|
				    \Wnew|\Wdelete|\Wvoid|\Wtypeof|       # or keywords
						\Winstanceof|\Win|\Wdo|\Wreturn|
						\Wcase|\Wthrow|\Wyield|
				    ^new|^delete|^void|^typeof|^instanceof|
						^in|^do|^return|^case|^throw|^yield|^
				  )\s*
				  (/)   # opening slash
				  (?!   # not followed by:
						/|  # another slash (comment),
						\*| # an asterisk (comment),
						$   # or the end of the line
					)
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
					(?&lt;!\\)   # NOT preceded by a backslash
					(/)       # closing slash
					([gimy]*) # and any flags
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.js.regexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\1)|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\1)|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(switch)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.switch.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.switch.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#round-brackets</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.scope.begin.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?&lt;!\.)\b(case|default)\b</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.switch.js</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=:)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-template-string</key>
		<dict>
			<key>begin</key>
			<string>(`)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template.begin.js</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.embedded.interpolated-string.js</string>
			<key>end</key>
			<string>(`)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.template.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-content</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\`</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\${</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.substitution.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.substitution.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>_*?[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.variable.other.property.static.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b([A-Z][$\w]*)\s*(\.)([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.other.object.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)([_$a-zA-Z][$\w]*)\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.variable.other.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.object.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.js</string>
				</dict>
			</array>
		</dict>
		<key>merge-conflits</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.conflict-marker.merge-into.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^([&lt;]{7})\s(.+)$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.conflict-marker.separator.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^([=|]{7})$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.conflict-marker.other-commit.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^([&gt;]{7})\s(.+)$</string>
				</dict>
			</array>
		</dict>
		<key>round-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>square-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([1-7][0-7]{0,2}|[0-7]{2,3}|[bfnrtv0'"\\]|x\h{2}|u\{\h+\}|u\h{4})</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
			</array>
		</dict>
		<key>support-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(Array|ArrayBuffer|Boolean|DataView|Date|Float32Array|Float64Array|Function|Infinity|Int16Array|Int32Array|Int8Array|JSON|Map|Math|NaN|Number|Object|Promise|Proxy|Reflect|RegExp|Set|String|Symbol|System|TypeError|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|WeakMap|WeakSet)\b</string>
					<key>name</key>
					<string>support.class.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b((?&gt;Eval|Range|Reference|Syntax|Type|URI)?Error)\b</string>
					<key>name</key>
					<string>support.class.error.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;Buffer)\b</string>
					<key>name</key>
					<string>support.class.node.js</string>
				</dict>
			</array>
		</dict>
		<key>support-dom</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>DOM Core Level 4 (http://www.w3.org/TR/domcore/) and DOM Events Level 3 (http://www.w3.org/TR/DOM-Level-3-Events/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(Attr|CharacterData|Comment|CompositionEvent|CustomEvent|Document|DocumentFragment|DocumentType|DOMError|DOMException|DOMImplementation|DOMParser|DOMString|DOMTimestamp|DOMSettableTokenList|DOMStringList|DOMTokenList|Element|Event|EventTarget|FocusEvent|HTMLCollection|KeyboardEvent|MouseEvent|MutationObserver|MutationRecord|Node|NodeFilter|NodeIterator|NodeList|ProcessingInstruction|Range|Text|TextEvent|TreeWalker|UIEvent|WheelEvent|XMLDocument)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>DOM Core Level 4 (http://www.w3.org/TR/domcore/) and DOM Events Level 3 (http://www.w3.org/TR/DOM-Level-3-Events/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(CDATASection|DOMConfiguration|DOMErrorHandler|DOMImplementationList|DOMImplementationSource|DOMLocator|DOMObject|DOMUserData|Entity|EntityReference|MutationEvent|NamedNodeMap|NameList|Notation|TypeInfo|UserDataHandler)\b(?!\$)</string>
					<key>name</key>
					<string>invalid.deprecated.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>TypedArray specification used by HTML 5 (http://www.khronos.org/registry/typedarray/specs/latest/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(ArrayBuffer|DataView|Float32Array|Float64Array|Int8Array|Int16Array|Int32Array|TypedArray|Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>File specification used by HTML 5 (http://dev.w3.org/2006/webapi/FileAPI/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(Blob|File|FileList|FileReader)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>XMLHttpRequest specification used by HTML 5 (http://xhr.spec.whatwg.org/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(FormData|ProgressEvent|XMLHttpRequest|XMLHttpRequestUpload)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>EventSource specification used by HTML 5 (http://www.w3.org/TR/eventsource/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(EventSource)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>CSSOM specification used by HTML 5 (http://dev.w3.org/csswg/cssom/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(CSS|CSSCharsetRule|CSSImportRule|CSSPageRule|CSSRule|CSSRuleList|CSSStyleDeclaration|CSSStyleRule|CSSStyleSheet|MediaList|Stylesheet|StyleSheetList)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>CSSOM View specification used by HTML 5 (http://dev.w3.org/csswg/cssom-view/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(Screen)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>CSS Font specification used by HTML 5 (http://dev.w3.org/csswg/css-fonts/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(CSSFontFaceRule)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>SVG specification used by HTML 5 (http://www.w3.org/TR/SVG/single-page.html)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGColor|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGDocument|SVGElement|SVGElementInstance|SVGElementInstanceList|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength|SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMatrix|SVGMetadataElement|SVGMissingGlyphElement|SVGNumber|SVGNumberList|SVGPaint|SVGPathElement|SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegList|SVGPathSegMovetoAbs|SVGPathSegMovetoRel|SVGPatternElement|SVGPoint|SVGPointList|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio|SVGRadialGradientElement|SVGRect|SVGRectElement|SVGRenderingIntent|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGUnitTypes|SVGUseElement|SVGUseElement|SVGVKernElement|SVGViewElement|SVGViewSpec|SVGZoomEvent)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>WebGL specification used by HTML 5 (http://www.khronos.org/registry/webgl/specs/latest/1.0/)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(WebGLActiveInfo|WebGLBuffer|WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat|WebGLTexture|WebGLUniformLocation)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>HTML 5 (http://www.w3.org/TR/html5/single-page.html)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(Audio|BarProp|DOMStringMap|ErrorEvent|FileError|HTMLAllCollection|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMediaElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLSour|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|Image|Location|MediaController|MediaError|MouseEvent|Navigator|Option|PageTransitionEvent|PopStateEvent|TextTrack|TextTrackCue|TextTrackCueList|TextTrackList|TimeRanges|TrackEvent|UIEvent|ValidityState|Window)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>HTML 5 (http://www.w3.org/TR/html5/single-page.html#window)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(applicationCache|closed|console|crypto|document|external|frameElement|frames|history|innerHeight|innerWidth|length|location|locationbar|menubar|name|navigator|offscreenBuffering|onabort|onafterprint|onbeforeprint|onbeforeunload|onblur|oncancel|oncanplay|oncanplaythrough|onchange|onclick|onclose|oncuechange|ondblclick|ondrag|ondragend|ondragenter|ondragexit|ondragleave|ondragover|ondragstart|ondrop|ondurationchange|onemptied|onended|onerror|onfocus|onhashchange|oninput|oninvalid|onkeydown|onkeypress|onkeyup|onload|onloadeddata|onloadedmetadata|onloadstart|onmessage|onmousedown|onmouseenter|onmouseleave|onmousemove|onmouseout|onmouseover|onmouseup|onmousewheel|onoffline|ononline|onpagehide|onpageshow|onpause|onplay|onplaying|onpopstate|onprogress|onratechange|onreset|onresize|onscroll|onseeked|onseeking|onselect|onshow|onstalled|onstorage|onsubmit|onsuspend|ontimeupdate|onunload|onvolumechange|onwaiting|opener|outerHeight|outerWidth|pageXOffset|pageYOffset|parent|personalbar|postMessage|screen|screenX|screenY|scrollbars|scrollX|scrollY|self|status|statusbar|toolbar|top|window)\b(?!\$)</string>
					<key>name</key>
					<string>support.constant.dom.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>HTML 5 (http://www.w3.org/TR/html5/single-page.html#window)</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(addEventListener|alert|atob|blur|btoa|clearInterval|clearTimeout|close|confirm|dispatchEvent|doNotTrack|find|focus|getComputedStyle|getMatchedCSSRules|getSelection|matchMedia|moveBy|moveTo|open|openDatabase|print|prompt|removeEventListener|resizeBy|resizeTo|scroll|scrollBy|scrollTo|setInterval|setTimeout|showModalDialog|stop)\b(?!\$)</string>
					<key>name</key>
					<string>support.function.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(captureEvents|defaultStatus|defaultstatus|releaseEvents)\b(?!\$)</string>
					<key>name</key>
					<string>invalid.deprecated.dom.js</string>
				</dict>
			</array>
		</dict>
		<key>support-other</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(constructor|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|hasOwnProperty|isFinite|isNaN|isPrototypeOf|parseFloat|parseInt|propertyIsEnumerable|toLocaleString|toString|unescape|valueOf)\b</string>
					<key>name</key>
					<string>support.function.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(clearImmediate|clearInterval|clearTimeout|require|setImmediate|setInterval|setTimeout)\b</string>
					<key>name</key>
					<string>support.function.node.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;document|window)\b</string>
					<key>name</key>
					<string>support.type.object.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;global|GLOBAL|root|__dirname|__filename)\b</string>
					<key>name</key>
					<string>support.type.object.node.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.console.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.console.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(console)(?:(\.)(assert|count|dir|error|group|groupCollapsed|groupEnd|info|log|profile|profileEnd|table|time|timeEnd|trace|warn))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.function.process.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(process)(?:(\.)(?:(arch|argv|config|env|execArgv|execPath|exitCode|mainModule|pid|platform|stderr|stdin|stdout|title|version|versions)|(abort|chdir|cwd|exit|getgid|getgroups|getuid|hrtime|initgroups|kill|memoryUsage|nextTick|setgid|setgroups|setuid|umask|uptime)))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(exports|module(?:(\.)(children|exports|filename|id|loaded|parent)))?\b</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{{</string>
					<key>end</key>
					<string>}}</string>
					<key>name</key>
					<string>meta.tag.mustache.js</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
	<key>uuid</key>
	<string>93E017CC-6F27-11D9-90EB-000D93589AF6</string>
</dict>
</plist>
